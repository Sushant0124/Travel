<% layout("/layouts/boilerplate.ejs") %>

<script>
    const mapToken = "<%= process.env.MAP_KEY %>";
    const coordinates = <%- JSON.stringify(list.geometry.coordinates) %>;
</script>

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <h3 class="col-md-8 mb-4 offset-3"><b><%= list.title %></b></h3>
            <div class="card col-md-8 offset-2">
                <img src="<%= list.image.url %>" class="card-img-top show-img" alt="Listing Image">
                <div class="card-body">
                    <p class="card-text"><i>Owned By: <%= list.owner.username %></i></p>
                    <p class="card-text"><%= list.description %></p>
                    <p class="card-text">&#8377;<%= list.price ? list.price.toLocaleString("en-IN") : "Price not available" %></p>
                    <p class="card-text"><strong>Location:</strong> <%= list.location %></p>
                    <p class="card-text"><strong>Country:</strong> <%= list.country %></p>
                </div>
            </div>
            
            <% if (currUser && currUser._id.toString() === list.owner._id.toString()) { %>
                <div class="d-flex justify-content-between mt-4">
                    <a href="/listings/<%= list._id %>/edit" class="btn btn-warning">Edit</a>
                    <form method="post" action="/listings/<%= list._id %>?_method=DELETE">
                        <button class="btn btn-danger">Delete</button>
                    </form>
                </div>
            <% } %>
        </div>
    </div>

    <!-- Payment Button Section -->
    <div class="row justify-content-center">
        <div class="col-md-8 mb-3">
            <button id="payment-button" class="btn btn-success btn-lg btn-block">Book Now</button>
        </div>
    </div>

    <!-- Reviews Section -->
    <div class="row justify-content-center">
        <div class="col-md-8 mb-3">
            <hr />
            <% if (currUser) { %>
                <h4>Leave a Review</h4>
                <form method="post" action="/listings/<%= list._id %>/reviews" novalidate class="needs-validation">
                    <div class="mb-3 mt-3">
                        <label for="rating" class="form-label">Rating</label>
                        <fieldset class="starability-slot">
                            <input type="radio" id="no-rate" class="input-no-rate" name="review[rating]" value="1" checked aria-label="No rating." />
                            <input type="radio" id="first-rate1" name="review[rating]" value="1" />
                            <label for="first-rate1" title="Terrible">1 star</label>
                            <input type="radio" id="first-rate2" name="review[rating]" value="2" />
                            <label for="first-rate2" title="Not good">2 stars</label>
                            <input type="radio" id="first-rate3" name="review[rating]" value="3" />
                            <label for="first-rate3" title="Average">3 stars</label>
                            <input type="radio" id="first-rate4" name="review[rating]" value="4" />
                            <label for="first-rate4" title="Very good">4 stars</label>
                            <input type="radio" id="first-rate5" name="review[rating]" value="5" />
                            <label for="first-rate5" title="Amazing">5 stars</label>
                        </fieldset>
                    </div>
                    <div class="mb-3 mt-3">
                        <label for="comment" class="form-label">Comments</label>
                        <textarea class="form-control" id="comment" name="review[comment]" rows="5" cols="30"></textarea>
                        <div class="invalid-feedback">Please enter a comment</div>
                    </div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </form>
                <hr />
            <% } %>
            <% if (list.review.length > 0) { %>
                <h4>All Reviews</h4>
                <div class="row">
                    <% for (let r of list.review) { %>
                        <div class="card col-5 ms-3 mb-3">
                            <div class="card-body">
                                <p class="card-text"><i>Created by: <%= r.author.username %></i></p>
                                <p class="card-text"><%= r.comment %></p>
                                <p class="starability-result" data-rating=<%= r.rating %>> </p>
                                <form class="mb-3" method="post" action="/listings/<%= list._id %>/reviews/<%= r._id %>?_method=DELETE">
                                    <button type="submit" class="btn btn-sm btn-dark">Delete</button>
                                </form>
                            </div>
                        </div>
                    <% } %>
                </div>
            <% } %>
        </div>
    </div>

    <!-- Map Section -->
    <div class="row justify-content-center">
        <div class="col-md-8 mb-3">
            <h3>Where You Will Be</h3>
            <div id="map"></div>
        </div>
    </div>
</div>

<!-- Razorpay and Map Scripts -->
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    mapboxgl.accessToken = mapToken;
    const map = new mapboxgl.Map({
        container: 'map', // container ID
        center: coordinates, // starting position [lng, lat]
        zoom: 9 // starting zoom
    });

    const marker = new mapboxgl.Marker({
        color: "red",
        draggable: true
    }).setLngLat(coordinates)
      .addTo(map);

    const popup = new mapboxgl.Popup({ offset: 25 })
        .setHTML(`<h5><%= list.title %></h5><p><%= list.location %></p>`)
        .setLngLat(coordinates)
        .addTo(map);

    marker.setPopup(popup);

    // Razorpay Payment Script
    const handlePayment = async () => {
    try {
        // Fetch the Razorpay key ID from the server
        const configResponse = await fetch('/config');
        const config = await configResponse.json();
        const razorpayKeyId = config.razorpayKeyId;
        console.log('Razorpay Key ID:', razorpayKeyId);

        // Fetch the order details from the server
        const orderResponse = await fetch('/create-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                amount: <%= list.price %>, // Amount in paisa
                currency: 'INR'
            })
        });

        if (!orderResponse.ok) {
            throw new Error('Failed to create order');
        }

        const order = await orderResponse.json();
        console.log('Order details:', order);

        // Razorpay payment options
        const options = {
            "key": razorpayKeyId,
            "amount": order.amount,
            "currency": order.currency,
            "name": "<%= list.title %>",
            "description": "Booking Payment",
            "order_id": order.id,
            "handler": async function (response) {
                // Send payment details to the server for verification
                try {
                    const verifyResponse = await fetch('/verify-payment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_signature: response.razorpay_signature
                        })
                    });

                    const data = await verifyResponse.json();

                    if (data.status === 'success') {
                        alert('Payment Successful');
                    } else {
                        alert('Payment Verification Failed');
                    }
                } catch (error) {
                    console.error('Error verifying payment:', error);
                    alert('Payment Verification Error');
                }
            },
            "prefill": {
                "name": "<%= currUser ? currUser.username : '' %>",
                "email": "<%= currUser ? currUser.email : '' %>",
                "contact": "<%= currUser ? currUser.phone : '' %>"
            },
            "theme": {
                "color": "#3399cc"
            }
        };

        const rzp = new Razorpay(options);
        rzp.open();

    } catch (error) {
        console.error('There was an error processing the payment:', error);
        alert('Payment failed. Please try again.');
    }
};

document.getElementById('payment-button').onclick = handlePayment;
</script>
